
package com.example.demo.controller;

import com.example.demo.entity.CustomerEntity;
import com.example.demo.service.CustomerService;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(CustomerController.class)
public class CustomerControllerTest {
    @Autowired
    private MockMvc mvc;

    @MockBean
    private CustomerService service;

    @Test
    public void testGetAllCustomerEntitys() throws Exception {
        when(service.getCustomerAll())
                .thenReturn(createListOfCustomerEntitys());

        mvc.perform(get("/api/customers")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andDo(print())
                .andExpect(jsonPath("$[0].customerId").value("1"))
                .andExpect(jsonPath("$[0].name").value("Petrov"))
                .andExpect(jsonPath("$[1].customerId").value("2"))
                .andExpect(jsonPath("$[1].name").value("Ivanov"));
    }

    @Test
    public void testCreateNewCustomerEntity() throws Exception {
        CustomerEntity customerEntity = new CustomerEntity(null, "petrov", null);
        CustomerEntity savedCustomerEntityEntity = new CustomerEntity(3L, "petrov", null );
        when(service.createCustomer(customerEntity)).thenReturn(savedCustomerEntityEntity);

        mvc.perform(post("/api/customers")
                .content("{\"name\": \"petrov\"}")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andDo(print());

        verify(service, times(1)).createCustomer(customerEntity);

    }

    private List<CustomerEntity> createListOfCustomerEntitys(){
        CustomerEntity customer1 = new CustomerEntity();
        customer1.setId(1L);
        customer1.setName("Petrov");

        CustomerEntity customer2 = new CustomerEntity();
        customer2.setId(2L);
        customer2.setName("Ivanov");


        return Arrays.asList(customer1, customer2);
    }
}
